@page "/"
@using Guilder.Client.Services;
@using Guilder.Shared;
@using NodaTime;
@implements IDisposable;
@inject MeetingClient MeetingClient
@inject IClock Clock
@inject ICurrentTimeZone CurrentTimeZone
@inject NavigationManager Navigation
@inject TimelineStore TimelineStore

<PageTitle>@(_room?.Name ?? "Loading Room")</PageTitle>

    <CurrentMeeting Meeting="TimelineStore.CurrentMeeting"></CurrentMeeting>
    <Timeline Meetings="_meetings" EventCallbackParam="(() => StateHasChanged())"></Timeline>

    @code {
    private Room? _room;


    private IEnumerable<Meeting> _meetings = new List<Meeting>();

    private Timer? RefreshTimer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Navigation.TryGetQueryString("roomId", out string? roomId);

        roomId ??= "3a02a800-1e8a-49ef-82f6-be60e1147fdd";

        _room = await MeetingClient.GetRoomAsync(roomId);

        await Refresh();

        RefreshTimer = new Timer(TimerRefresh,
            null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }

    private async void TimerRefresh(object? state)
    {
        await InvokeAsync(() => Refresh());
    }

    private async Task Refresh()
    {
        if (_room is null)
        {
            return;
        }

        var current = Clock.GetCurrentInstant().InZone(CurrentTimeZone.TimeZone).Date;
        var startOfDay = current.AtStartOfDayInZone(CurrentTimeZone.TimeZone);

        _meetings = await MeetingClient.GetFreeBusyForRoomId(_room.Id,
            startOfDay.ToInstant(),
            startOfDay.Plus(Duration.FromDays(1)).ToInstant());

        var now = Clock.GetCurrentInstant();
        Console.WriteLine($"Now is {now}");
        Console.WriteLine($"First meeting {_meetings.FirstOrDefault()?.StartTimeInclusive} to {_meetings.FirstOrDefault()?.EndTimeExclusive}");
    }

    void IDisposable.Dispose()
    {
        RefreshTimer?.Dispose();
    }
}
