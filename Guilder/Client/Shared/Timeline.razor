@using Guilder.Client.Services;
@using Guilder.Client.Timeline;
@using Guilder.Shared;
@inject TimelineStore TimelineStore

<div class="container">
    <div class="position-relative">
        <div class="row timeline-wrapper">
            <div class="scroller" style="min-width:@(100 * TimelineStore.SlotsToDisplay.Count)px">
                @for(int i = 0; i < TimelineStore.SlotsToDisplay.Count; i++)
                {
                    var item = TimelineStore.SlotsToDisplay[i];
                    <button class="slot-wrapper @(item.PartOfMeeting is null ? "free" : "busy")" @onclick="(async () => {
                        await UpdateCurrentMeeting(item);
                        })">
                        @ShowValue(i)
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<Meeting> Meetings
    {
        get => TimelineStore.Meetings;
        set => TimelineStore.SetMeetings(value);
    }

    [Parameter]
    public EventCallback<Meeting?> MeetingSelected { get;set; }

    public string ShowValue(int index)
    {
        if (index == 0)
        {
            return TimelineStore.SlotsToDisplay[index].StartInclusive.TimeOfDay.ToString("hh:mm tt", null);
        }
        if (index < TimelineStore.SlotsToDisplay.Count)
        {
            if (TimelineStore.SlotsToDisplay[index - 1].PartOfMeeting is not null && TimelineStore.SlotsToDisplay[index + 1].PartOfMeeting is not null)
            {
                return "----";
            }
        }

        return TimelineStore.SlotsToDisplay[index].StartInclusive.TimeOfDay.ToString("hh:mm tt", null);
    }

    public async Task UpdateCurrentMeeting(TimelineSlot item)
    {
        await MeetingSelected.InvokeAsync(item.PartOfMeeting);
    }
}
